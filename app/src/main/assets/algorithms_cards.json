[
  {
    "title": "Selection Sort",
    "content": "<p>The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning.</p><p>Time Complexity: O(n^2) as there are two nested loops.</p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "Bubble Sort",
    "content": "<p>It works by multiple iterations repeatedly swapping the adjacent elements if they are in wrong order. In each iteration, part of the array is sorted at the left. This algorithm also runs an extra time after the array is sorted to check if it is done</p><p>Time Complexity at best case scenario: O(n)</p><p>Time Complexity at worst case scenario: O(n^2)</p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "3-Way MergeSort",
    "content": "<p>Merge sort involves recursively splitting the array into 2 parts, sorting and finally merging them. A variant of merge sort is called 3-way merge sort where instead of splitting the array into 2 parts we split it into 3 parts.Merge sort recursively breaks down the arrays to subarrays of size half. Similarly, 3-way Merge sort breaks down the arrays to subarrays of size one third.</p><li>Time complexity: O(n log3 n)</li> ",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "Recursive Bubble Sort",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Insertion Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>Recursive Insertion Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Merge Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Iterative Merge Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Quick Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Iterative Quick sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>Heap Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Counting Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Radix Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Bucket Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Shell Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>TimSort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Comb Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Pigeonhole Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Cycle Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Cocktail Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>Strand Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Bitonic Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "Pancake Sorting",
    "content": "<p>Based on Selection Sort but with only one function available<br><font color=\"blue\">flip(array, i) //Reverse array from position 0 to i</font>In each iteration find the smallest number then use flip</p><p>Total O(n) flip operations are performed in above code. The overall time complexity is O(n^2).</p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Binary Insertion Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "BogoSort or Permutation Sort",
    "content": "<p>BogoSort also known as permutation sort, stupid sort, slow sort, shotgun sort or monkey sort is a particularly ineffective algorithm based on generate and test paradigm.<br><font color=\"blue\">while not Sorted(list) do<br>&nbsp;&nbspshuffle (list)<br>done</font></p><p>>Worst Case : O(âˆž) (since this algorithm has no upper bound)<br>>Average Case: O(n*n!)<br>>Best Case : O(n) (when array given is already sorted)</p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>Gnome Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Sleep Sort</p>",
    "content": "<p>AKA King of Laziness or Sorting While Sleeping</p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Structure Sorting (C++)<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Stooge Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Tag Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>Tree Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Cartesian Tree Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Odd-Even Sort / Brick Sort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>QuickSort on singly Linked List<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>QuickSort on doubly Linked List<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },

  {
    "title": "<p>3-Way QuickSort<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  },
  {
    "title": "<p>Merge Sort for Linked Lists<p>",
    "content": "<p></p>",
    "image_url": "",
    "deck": "Algorithms"
  }
]
