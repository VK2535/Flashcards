[

  {
    "title": "Slicing",
    "content": "<p>In C++ programming, object slicing occurs when an object of a subclass type is copied to an object of superclass type: the superclass copy will not have any of the member variables defined in the subclass. More subtly, object slicing can also occur when an object of a subclass type is copied to an object of the same type by the superclass's assignment operator, in which case some of the target object's member variables will retain their original values instead of being copied from the source object.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Stack-based memory allocation",
    "content": "<p>Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out (LIFO) manner.</p><p>Because the data is added and removed in a last-in-first-out manner, stack-based memory allocation is very simple and typically faster than heap-based memory allocation (also known as dynamic memory allocation). Another feature is that memory on the stack is automatically, and very efficiently, reclaimed when the function exits, which can be convenient for the programmer if the data is no longer required. If however, the data needs to be kept in some form, then it must be copied from the stack before the function exits. Therefore, stack based allocation is suitable for temporary data or data which is no longer required after the creating function exits.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Static method",
    "content": "<p>A <b>static method</b> is part of a class definition, but is not part of the objects it creates. Important: A program can execute a static method without first creating an object! All other methods (those that are not static) exist only when they are part of an object. </p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Strong typed language",
    "content": "<p>Generally, a <b>strongly typed language</b> has stricter typing rules at compile time, which implies that errors and exceptions are more likely to happen during compilation. Most of these rules affect variable assignment, return values and function calling</p><p>Strong typing generally refers to use of programming language types in order to both capture invariants of the code, and ensure its correctness, and definitely exclude certain classes of programming errors</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Subclass",
    "content": "<p>In object-oriented programming, inheritance enables new objects to take on the properties of existing objects. A class that is used as the basis for inheritance is called a superclass or base class. A class that inherits from a superclass is called a <b>subclass</b> or derived class</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Subclass coupling",
    "content": "<p>In software engineering, <b>coupling</b> is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are; the strength of the relationships between modules.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Subtyping",
    "content": "<p>In programming language theory, <b>subtyping</b> (also subtype polymorphism or inclusion polymorphism) is a form of type polymorphism in which a subtype is a datatype that is related to another datatype (the supertype) by some notion of substitutability, meaning that program elements, typically subroutines or functions, written to operate on elements of the supertype can also operate on elements of the subtype",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Substitutability",
    "content": "<p><b>Substitutability</b> is a principle in object-oriented programming stating that, in a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e. an object of type T may be substituted with any object of a subtype S) without altering any of the desirable properties of the program (correctness, task performed, etc.)</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Superclass",
    "content": "<p><b>Superclass</b> is the class from which many subclasses can be created. The subclasses inherit the characteristics of a superclass. The superclass is also known as the parent class or base class.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Multitier architecture",
    "content": "<p>In software engineering, <b>multitier architecture</b> (often referred to as n-tier architecture) or multilayered architecture is a clientâ€“server architecture in which presentation, application processing, and data management functions are physically separated. Common layers are:</p><p><b>Presentation layer</b> (a.k.a. UI layer, view layer, presentation tier in multitier architecture)<br>><b>Application layer</b> (a.k.a. service layer or GRASP Controller Layer)<br>><b>Business layer</b> (a.k.a. business logic layer (BLL), domain layer)<br>><b>Data access</b> layer (a.k.a. persistence layer, logging, networking, and other services which are required to support a particular business layer)</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Template method pattern",
    "content": "<p>In software engineering, the <b>template method pattern</b> is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure</p><p>It is composed by a \"template method\" in a main class and a concrete implementation which fill in the empty or \"variant\" parts of the \"template\"</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Object-oriented programming",
    "content": "<p><b>Object-oriented programming (OOP)</b> is a programming paradigm based on the concept of \"objects\", which can contain data, in the form of fields (often known as attributes), and code, in the form of procedures (often known as methods)</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Test Driving Development",
    "content": "<p><b>Test-driven development (TDD)</b> is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Trait",
    "content": "<p>Traits both provide a set of methods that implement behaviour to a class, and require that the class implement a set of methods that parameterize the provided behaviour.</p><p>n interface may define one or more behaviors via method signatures, while a trait defines behaviors via full method definitions: i.e., it includes the body of the methods. In contrast, mixins include full method definitions and may also carry state through member variable, while traits usually don't.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Type System",
    "content": "<p>In programming languages, a <b>type system</b> is a set of rules that assigns a property called type to the various constructs of a computer program, such as variables, expressions, functions or modules. These types formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components (e.g. \"string\", \"array of float\", \"function returning boolean\"). The main purpose of a type system is to reduce possibilities for bugs in computer programs</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Type Conversion / typecasting",
    "content": "<p>In computer science, <b>type conversion</b>, type casting, type coercion, and type juggling are different ways of changing an expression from one data type to another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Virtual Function / Method",
    "content": "<p>In object-oriented programming, in languages such as C++, and Object Pascal, a <b>virtual function</b> or <b>virtual method</b> is an inheritable and overridable function or method for which dynamic dispatch is facilitated. This concept is an important part of the (runtime) polymorphism portion of object-oriented programming (OOP). In short, a virtual function defines a target function to be executed, but the target might not be known at compile time.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Virtual Class",
    "content": "<p>In object-oriented programming, a <b>virtual class</b> is a nested inner class whose functions and member variables can be overridden and redefined by subclasses of an outer class.[1] Virtual classes are analogous to virtual functions.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Virtual Method Table",
    "content": "<p>A <b>Virtual Method Table (VMT)</b>, virtual function table, virtual call table, dispatch table, vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch (or run-time method binding).</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Virtual Inheritance",
    "content": "<p><b>Virtual inheritance</b> is a C++ technique that ensures only one copy of a base class's member variables are inherited by grandchild derived classes. Without virtual inheritance, if class A is inherits from both classes B and C, and classes B and C both inherit from class D, then class A will contain two copies of D's member variables: one via B, and one via C. These will be accessible independently, using scope resolution.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Dynamic Dispatch",
    "content": "<p>In computer science, <b>dynamic dispatch</b> is the process of selecting which implementation of a polymorphic operation (method or function) to call at run time</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Yo-yo Problem",
    "content": "<p>In software development, the <b>yo-yo problem</b> is an anti-pattern that occurs when a programmer has to read and understand a program whose inheritance graph is so long and complicated that the programmer has to keep flipping between many different class definitions in order to follow the control flow of the program.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Weak Reference",
    "content": "<p>In computer programming, a <b>weak reference</b> is a reference that does not protect the referenced object from collection by a garbage collector, unlike a strong reference.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Void type",
    "content": "<p>The <b>Void type</b>, in several programming languages derived from C and Algol68, is the type for the result of a function that returns normally, but does not provide a result value to its caller.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Viscosity",
    "content": "<p>In object oriented programming, viscosity[1] refers to the ease at which a developer can add design-preserving code to a system. If it is easier to add a hack than it is to add code that fits into the program's design, then the system has high viscosity. If it is easy to add new code to the program while maintaining the design, then the program has low viscosity.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Local and instance variables",
    "content": "<p><b>Local variables</b> are defined in the method and scope of the variables that have existed inside the method itself.</p><p>An <b>instance variable</b> is defined inside the class and outside the method and scope of the variables exist throughout the class</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },

  {
    "title": "Overriding",
    "content": "<p>A type of polymorphism. Method overriding happens if the sub class method satisfies the below conditions with the Super class method:</p><p>Method name should be same</p><p>Argument should be same</p><p>Return type also should be same</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Overloading",
    "content": "<p>For method overloading, subclass method should satisfy the below conditions with the Super class method (or) methods in the same class itself:</p><p>Same method name</p><p>Different argument type</p><p>May have different return types</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "Inheritance (implements)",
    "content": "<p>Multiple inheritance cannot be achieved in java. To overcome this problem Interface concept is introduced. An interface is a template which has only method declarations and not the method implementation.</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "S.O.L.I.D principles",
    "content": "<p>Single responsibility principle</p><p>Open Close principle: Software entities should be open for extension but closed for modification</p><p>Liskov substitution principle: Objects should be replaceable of their subtypes with no further changes</p><p>Interface segregation principle: Many client-specific interfaces over one general purpose interface</p><p>Dependency Inversion Principle: Code should depend on abstraction over concretions</p>",
    "image_url": "",
    "deck": "Object Oriented"
  },
  {
    "title": "OO principles",
    "content": "<p><b>Encapsulation:</b> is the idea that the attributes of an entity are enclosed in that entity. This gives context to attributes</p><p><b>Inheritance:</b> is the idea that an entity can inherit attributes from another entity<p><b>Polymorphism:</b>Overriding and overloading</p><p><b>Abstraction:</b> is the process of hiding all but the relevant information about a thing to make things less complex and more efficient for the user</p>",
    "image_url": "",
    "deck": "Object Oriented"
  }
]