{
  cards: [
    {
      id: 1,
      title: "<p>Primitive Types</p>",
      content: "<li><b>Boolean</b></li><li><b>Character</b></li><li><b>Floating-point numbers</b> limited precision approximations of real number values.</li><li><b>Fixed-point numbers</b></li><li><b>Integer</b>integral or fixed-precision values.</li><li><b>Reference</b>(also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one.</li><li><b>Enumerated type</b> a small set of uniquely named values</li>",
      image_url: "",
      deck: "Data Structure"
    },
    {
      id: 2,
      title: "<p>Composite types or non-primitive type<p>",
      content: "<li><b>Array</b></li><li><b>Record</b> Also known as Tuple or structure</li><li><b>Union</b> Also called variant record, discrimate union or disjoint union.</li>",
      image_url: "",
      deck: "Data Structure"
    },
    {
      id: 3,
      title: "<p>Container (Abstract Data types)<p>",
      content: "<p>also known as Collections is a grouping of some variable number of data items (possibly zero) that have some shared significance to the problem being solved and need to be operated upon together in some controlled fashion. Generally, the data items will be of the same type. Examples of collections include lists, sets, multisets, trees and graphs</p>",
      image_url: "",
      deck: "Data Structure"
    },
    {
      id: 4,
      title: "<p>List (Abstract Data types)<p>",
      content: "<p>A list or sequence is an abstract data type that represents a countable number of ordered values, where the same value may occur more than once. Lists are a basic example of containers, as they contain other values. If the same value occurs multiple times, each occurrence is considered a distinct item.A singly linked list structure, implementing a list with 3 integer elements.</p>",
      image_url: "ds_list.png",
      deck: "Data Structure"
    }
  ]
}